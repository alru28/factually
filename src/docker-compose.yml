name: factually

services:
  # API Gateway and Services
  gateway:
    build: ./api-gateway
    ports:
      - "8000:8000"
    depends_on:
      - auth-service
      - verification-service
      - storage-service
      - transformation-service
      - orchestrator-service
      - extraction-service
      - lgtm
    environment:
      - SERVICE_NAME=api-gateway
      - LOG_LEVEL=DEBUG
      - OTLP_ENDPOINT=http://lgtm:4318
      - VERIFICATION_SERVICE_URL=http://verification-service:8000
      - AUTH_SERVICE_URL=http://auth-service:8000
      - STORAGE_SERVICE_URL=http://storage-service:8000
      - ORCHESTRATOR_SERVICE_URL=http://orchestrator-service:8000
      - EXTRACTION_SERVICE_URL=http://extraction-service:8000
      - TRANSFORMATION_SERVICE_URL=http://transformation-service:8000
    networks:
      - factually-network
  verification-service:
    build: ./verification-service
    environment:
      - SERVICE_NAME=verification-service
      - LOG_LEVEL=DEBUG
      - OTLP_ENDPOINT=http://lgtm:4318
      - OLLAMA_MODEL=qwen3:4b
      - OLLAMA_CONNECTION_STRING=http://ollama:11434
      - STORAGE_SERVICE_URL=http://storage-service:8000
    ports:
      - "8005:8000"
    networks:
      - factually-network
    depends_on:
      storage-service:
        condition: service_started
      lgtm:
        condition: service_started
  auth-service:
    build: ./auth-service
    environment:
      - SERVICE_NAME=auth-service
      - LOG_LEVEL=DEBUG
      - OTLP_ENDPOINT=http://lgtm:4318
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/auth_db
      - MAILHOG_HOST=mailhog
      - MAILHOG_PORT=1025
    ports:
      - "8004:8000"
    networks:
      - factually-network
    depends_on:
      postgres:
        condition: service_healthy
      lgtm:
        condition: service_started
  transformation-service:
    build: ./transformation-service
    environment:
      - SERVICE_NAME=transformation-service
      - LOG_LEVEL=DEBUG
      - OTLP_ENDPOINT=http://lgtm:4318
      - STORAGE_SERVICE_URL=http://storage-service:8000
      - RABBITMQ_CONNECTION_STRING=amqp://guest:guest@rabbitmq:5672/%2F
    ports:
      - "8003:8000"
    networks:
      - factually-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      storage-service:
        condition: service_started
      lgtm:
        condition: service_started
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  orchestrator-service:
    build: ./orchestrator-service
    environment:
      - SERVICE_NAME=orchestrator-service
      - LOG_LEVEL=DEBUG
      - OTLP_ENDPOINT=http://lgtm:4318
      - RABBITMQ_CONNECTION_STRING=amqp://guest:guest@rabbitmq:5672/%2F
    ports:
      - "8002:8000"
    networks:
      - factually-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      extraction-service:
        condition: service_started
      storage-service:
        condition: service_started
      transformation-service:
        condition: service_started
      lgtm:
        condition: service_started
      
  extraction-service:
    build: ./extraction-service
    environment:
      - SERVICE_NAME=extraction-service
      - LOG_LEVEL=DEBUG
      - OTLP_ENDPOINT=http://lgtm:4318
      - STORAGE_SERVICE_URL=http://storage-service:8000
      - ORCHESTRATOR_SERVICE_URL=http://orchestrator-service:8000
      - RABBITMQ_CONNECTION_STRING=amqp://guest:guest@rabbitmq:5672/%2F
    ports:
      - "8006:8000"
    networks:
      - factually-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      storage-service:
        condition: service_started
      lgtm:
        condition: service_started

  storage-service:
    build: ./storage-service
    environment:
      - SERVICE_NAME=storage-service
      - LOG_LEVEL=DEBUG
      - OTLP_ENDPOINT=http://lgtm:4318
      - MONGO_CONNECTION_STRING=mongodb://mongo_user:mongo_pass@mongodb:27017/factually_db
      - WEAVIATE_HOST=weaviate
      - WEAVIATE_PORT=8080
      - WEAVIATE_GRPC=50051
      - OLLAMA_CONNECTION_STRING=http://ollama:11434
    networks:
      - factually-network
    ports:
      - "8001:8000"
    depends_on:
      - mongodb
      - lgtm

  # DB and Utilities
  mongodb: 
    image: mongo:5.0-focal
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: mongo_pass
    networks:
      - factually-network
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init/init_mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    command: mongod --quiet --logpath /dev/null

  ollama:
    image: ollama/ollama:latest
    volumes:
      - ollama_data:/root/.ollama
    pull_policy: always
    tty: true
    restart: on-failure:0
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - factually-network

  weaviate:
    command:
    - --host
    - 0.0.0.0
    - --port
    - '8080'
    - --scheme
    - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.29.0
    ports:
    - 8080:8080
    - 50051:50051
    volumes:
    - weaviate_data:/var/lib/weaviate
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      ENABLE_API_BASED_MODULES: 'true'
      ENABLE_MODULES: 'text2vec-ollama,generative-ollama'
      CLUSTER_HOSTNAME: 'node1'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-ollama'
    networks:
      - factually-network

  rabbitmq:
    image: rabbitmq:4.0.6-management-alpine
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - factually-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:15.2-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_db
    ports:
      - "5432:5432"
    networks:
      - factually-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - factually-network

  # Logging and Monitoring
  lgtm:
    image: grafana/otel-lgtm
    volumes:
      - ./init/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "3000:3000" # Grafana UI
    networks:
      - factually-network

volumes:
  mongodb_data:
  ollama_data:
  weaviate_data:
  postgres_data:

networks:
  factually-network:
    driver: bridge